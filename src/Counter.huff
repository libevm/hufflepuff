// Counter example
// Bare minimum example of how to set and read data from huff

// Interface
#define function increment() nonpayable returns ()
#define function setValue(uint256) nonpayable returns ()
#define function getValue() view returns (uint256)

// Storage definitions
#define constant VALUE_SLOT = FREE_STORAGE_POINTER()

// Functions
#define macro INCREMENT() = takes (0) returns (0) {
    [VALUE_SLOT] sload      // [var_value]
    0x01                    // [0x01, var_value]
    add                     // [var_value++]
    [VALUE_SLOT] sstore     // []; stores updated value
    stop
}

#define macro SET_VALUE() = takes (0) returns (0) {
    0x04 calldataload       // [value]
    [VALUE_SLOT]            // [value_slot, value]
    sstore
    stop
}

#define macro GET_VALUE() = takes (0) returns (0) {
    [VALUE_SLOT] sload      // [var_value]
    0x00                    // [0x00, var_value]
    mstore                  // []; stores var_value into memory location 0x0
    0x20                    // [0x20]
    0x00                    // [0x00, 0x20]
    return
}

#define macro MAIN() = takes (0) returns (0) {
    // Load the function selector
    pc calldataload 0xE0 shr    // [sig]

    dup1 __FUNC_SIG(increment) eq increment jumpi
    dup1 __FUNC_SIG(getValue) eq getValue jumpi
    dup1 __FUNC_SIG(setValue) eq setValue jumpi

    getValue:
        GET_VALUE()

    setValue:
        SET_VALUE()

    increment:
        INCREMENT()
}